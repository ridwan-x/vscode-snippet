{
	"Authorization Contrroller Laravel 5.5": {
		"prefix": "authorize",
		"description": "app/Http/Controllers/AuthorizationController.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Http\\Controllers;",
			"",
			"use Illuminate\\Http\\Request;",
			"use Illuminate\\Support\\Facades\\Auth;",
			"use App\\User;",
			"use App\\Product;",
			"",
			"class ProductController extends Controller",
			"{",
			"    /**",
			"     * Display a listing of the resource.",
			"     *",
			"     * @return \\Illuminate\\Http\\Response",
			"     */",
			"    public function index()",
			"    {",
			"        //",
			"    }",
			"",
			"    /**",
			"     * Show the form for creating a new resource.",
			"     *",
			"     * @return \\Illuminate\\Http\\Response",
			"     */",
			"    public function create()",
			"    {",
			"        //",
			"    }",
			"",
			"    /**",
			"     * Store a newly created resource in storage.",
			"     *",
			"     * @param  \\Illuminate\\Http\\Request  $request",
			"     * @return \\Illuminate\\Http\\Response",
			"     */",
			"    public function store(Request $request)",
			"    {",
			"",
			"        $this->authorize('create', 'App\\Product');",
			"        ",
			"    }",
			"",
			"    /**",
			"     * Display the specified resource.",
			"     *",
			"     * @param  int  $id",
			"     * @return \\Illuminate\\Http\\Response",
			"     */",
			"    public function show($id)",
			"    {",
			"        //",
			"    }",
			"",
			"    /**",
			"     * Show the form for editing the specified resource.",
			"     *",
			"     * @param  int  $id",
			"     * @return \\Illuminate\\Http\\Response",
			"     */",
			"    public function edit($id)",
			"    {",
			"        //",
			"    }",
			"",
			"    /**",
			"     * Update the specified resource in storage.",
			"     *",
			"     * @param  \\Illuminate\\Http\\Request  $request",
			"     * @param  int  $id",
			"     * @return \\Illuminate\\Http\\Response",
			"     */",
			"    public function update(Request $request, Product $produk)",
			"    {",
			"",
			"        $this->authorize('update', $produk);",
			"    }",
			"",
			"    /**",
			"     * Remove the specified resource from storage.",
			"     *",
			"     * @param  int  $id",
			"     * @return \\Illuminate\\Http\\Response",
			"     */",
			"    public function destroy(Product $produk)",
			"    {",
			"",
			"        $this->authorize('delete', $produk);",
			"        ",
			"",
			"    }",
			"}"
		]
	},
	"Auth Service Provider Laravel 5.5": {
		"prefix": "authorize",
		"description": "/app/Providers/AuthServiceProvider.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Providers;",
			"",
			"use Illuminate\\Support\\Facades\\Gate;",
			"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;",
			"",
			"class AuthServiceProvider extends ServiceProvider",
			"{",
			"    /**",
			"     * The policy mappings for the application.",
			"     *",
			"     * @var array",
			"     */",
			"    protected $policies = [",
			"        'App\\Model'     => 'App\\Policies\\ModelPolicy',",
			"        'App\\Product'   => 'App\\Policies\\ProductPolicy',",
			"    ];",
			"",
			"    /**",
			"     * Register any authentication / authorization services.",
			"     *",
			"     * @return void",
			"     */",
			"    public function boot()",
			"    {",
			"        $this->registerPolicies();",
			"",
			"        //",
			"    }",
			"}"
		]
	},
	"Policy Laravel 5.5": {
		"prefix": "authorize",
		"description": "/app/Policies/ProductPolicy.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Policies;",
			"",
			"use App\\User;",
			"use App\\Product;",
			"use App\\Staff;",
			"use Illuminate\\Auth\\Access\\HandlesAuthorization;",
			"",
			"class ProductPolicy",
			"{",
			"    use HandlesAuthorization;",
			"",
			"    /**",
			"     * Determine whether the user can view the product.",
			"     *",
			"     * @param  \\App\\User  $user",
			"     * @param  \\App\\Product  $product",
			"     * @return mixed",
			"     */",
			"    public function view(User $user, Product $product)",
			"    {",
			"        //",
			"    }",
			"",
			"    /**",
			"     * Determine whether the user can create products.",
			"     *",
			"     * @param  \\App\\User  $user",
			"     * @return mixed",
			"     */",
			"    public function create(User $user)",
			"    {",
			"        $toko  = $user->toko()->firstOrfail();",
			"        $staff = $this->staff($user,$toko);",
			"",
			"        return $staff->roles->permission->create_produk ;",
			"    }",
			"",
			"    /**",
			"     * Determine whether the user can update the product.",
			"     *",
			"     * @param  \\App\\User  $user",
			"     * @param  \\App\\Product  $product",
			"     * @return mixed",
			"     */",
			"    public function update(User $user, Product $product)",
			"    {",
			"        $toko  = $user->toko()->firstOrfail();",
			"        $staff = $this->staff($user,$toko);",
			"",
			"        return $product->toko_id === $toko->id && $staff->roles->permission->update_produk ;",
			"    }",
			"",
			"    /**",
			"     * Determine whether the user can delete the product.",
			"     *",
			"     * @param  \\App\\User  $user",
			"     * @param  \\App\\Product  $product",
			"     * @return mixed",
			"     */",
			"    public function delete(User $user, Product $product)",
			"    {",
			"        $toko  = $user->toko()->firstOrfail();",
			"        $staff = $this->staff($user,$toko);",
			"",
			"        return $product->toko_id === $toko->id && $staff->roles->permission->delete_produk ;",
			"    }",
			"",
			"    public function staff($user, $toko){",
			"        return Staff::where('toko_id',$toko->id)",
			"                    ->where('user_id',$user->id)",
			"                    ->with(['roles' => function($query){",
			"                        return $query->with(['permission']);",
			"                    }])->firstOrfail();",
			"    }"
		]
	}
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}