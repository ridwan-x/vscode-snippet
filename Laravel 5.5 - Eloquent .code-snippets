{
	"Model Controller Laravel 5.5": {
		"prefix": "eloquent",
		"description": "/app/Http/Controllers/UserController.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Http\\Controllers;",
			"",
			"use Illuminate\\Http\\Request;",
			"use App\\Table_A;",
			"",
			"class HomeController extends Controller",
			"{",
			"    /**",
			"     * Create a new controller instance.",
			"     *",
			"     * @return void",
			"     */",
			"    public function __construct()",
			"    {",
			"        $this->middleware('auth');",
			"    }",
			"",
			"    /**",
			"     * Show the application dashboard.",
			"     *",
			"     * @return \\Illuminate\\Http\\Response",
			"     */",
			"    public function index()",
			"    {",
			"        return view('home');",
			"    }",
			"",
			"    public function query(){",
			"",
			"        // Create",
			"        $Create = Table::create([",
			"            'message' => 'A new comment.',",
			"        ]);",
			"",
			"        // Create Multiple",
			"        $Create = Table::createMany([",
			"            [",
			"                'message' => 'A new comment.',",
			"            ]",
			"        ]);",
			"",
			"        // Create Sync",
			"        $CreateSync = $user->roles()->sync([1]);",
			"",
			"        // Update",
			"        $update = Table::where('active', 1)",
			"                       ->update([",
			"                            'delayed' => 1",
			"                       ]);",
			"",
			"        // Update Multiple",
			"        $update = Table::whereIn('id', [1])",
			"                       ->update([",
			"                         ['column' => 'value']",
			"                       ]);",
			"",
			"        // Delete",
			"        $delete = Table::where('active', 1)->delete();",
			"",
			"        // Delete Multiple",
			"        $delete = Table::whereIn('id', [1])->delete();",
			"",
			"        // One To One",
			"        $phone = User::find(1)->phone;",
			"",
			"        // One To Many",
			"        $comments = App\\Post::find(1)->comments;",
			"        $comments = App\\Post::find(1)->comments()->where('title', 'foo')->first();",
			"",
			"        // Many To Many",
			"        $roles = App\\User::find(1)->roles()->orderBy('name')->get();",
			"",
			"        #Eager Loading",
			"        $books = App\\Book::with('author')->get();",
			"        $books = App\\Book::with(['author', 'publisher'])->get();",
			"        $books = App\\Book::with('author.contacts')->get();",
			"        $users = App\\Book::with('author:id,name')->get();",
			"        ",
			"        $users = App\\User::with(['posts' => function ($query) use ($param){",
			"            $query->where('title', 'like', '%first%');",
			"        }])->get();",
			"",
			"        $users = App\\User::with(['posts' => function ($query) use ($param){",
			"            $query->orderBy('created_at', 'desc');",
			"        }])->get();",
			"",
			"        // Collection",
			"        where('price', '=', 100);",
			"        whereIn('price', [150, 200]);",
			"        whereNotIn('price', [150, 200]);",
			"        push(5);",
			"        random();",
			"        pluck('name');",
			"        first();",
			"        except(['price', 'discount']);",
			"        get('foo', 'default-value');",
			"        has('product');",
			"        implode('product', ', ');",
			"        isEmpty();",
			"        isNotEmpty();",
			"        all();",
			"        slice(4, 2);",
			"    }",
			"}"
		]
	},
	"Model Laravel 5.5": {
		"prefix": "eloquent",
		"description": "/app/Model.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App;",
			"",
			"use Illuminate\\Database\\Eloquent\\Model;",
			"",
			"class Table_A extends Model",
			"{",
			"    /**",
			"     * The table associated with the model.",
			"     *",
			"     * @var string",
			"     */",
			"    protected $table        = 'my_flights';",
			"",
			"    protected $primaryKey   = 'my_id';",
			"",
			"    protected $incrementing = false; // False if primary key non-numeric",
			"",
			"    /**",
			"     * The attributes that are mass assignable.",
			"     *",
			"     * @var array",
			"     */",
			"    protected $fillable = ['name'];",
			"",
			"    /**",
			"     * The attributes that should be hidden for arrays.",
			"     *",
			"     * @var array",
			"     */",
			"    protected $hidden = [",
			"        'user_id'",
			"    ];",
			"",
			"    /**",
			"     * The attributes that should be cast to native types.",
			"     * The supported cast types are: integer, real, float, double, string, boolean, object, array,  collection, date, datetime, and timestamp.",
			"     * @var array",
			"     */",
			"    protected $casts = [",
			"        'is_admin' => 'boolean',",
			"    ];",
			"",
			"    protected $timestamps   = false; // False if no created_at and updated_at",
			"",
			"    /**",
			"     * The storage format of the model's date columns.",
			"     * Y-m-d H:i:s",
			"     * @var string",
			"     */",
			"    protected $dateFormat = 'U';",
			"",
			"    /**",
			"     * If you need to customize the names of the columns used to store the timestamps.",
			"     *",
			"     * @var string",
			"     */",
			"    const CREATED_AT     = 'creation_date'; ",
			"",
			"    const UPDATED_AT     = 'last_update';",
			"",
			"    /**",
			"     * One To One : Table A To Table 1.",
			"     *",
			"     * return $this->hasOne('App\\Table_1', 'foreign_key');",
			"     * return $this->hasOne('App\\Table_1', 'foreign_key', 'local_key');",
			"     */",
			"    public function Table_1()",
			"    {",
			"        return $this->hasOne('App\\Table_1')->withDefault([",
			"    ",
			"            'name' => 'Guest Author',",
			"    ",
			"        ]);",
			"    }",
			"",
			"    /**",
			"     * One To Many : Table A To Table 2",
			"     *",
			"     * return $this->hasMany('App\\Table_2', 'foreign_key');",
			"     * return $this->hasMany('App\\Table_2', 'foreign_key', 'local_key');",
			"     */",
			"    public function Table_2()",
			"    {",
			"        return $this->hasMany('App\\Table_2')->withDefault([",
			"    ",
			"            'name' => 'Guest Author',",
			"    ",
			"        ]);",
			"    }",
			"",
			"    /**",
			"     * Many To Many : Table A To Table 3",
			"     *",
			"     * return $this->belongsToMany('App\\Table_3', 'role_user');",
			"     * return $this->belongsToMany('App\\Table_3', 'role_user', 'user_id', 'role_id');",
			"     */",
			"    public function Table_3()",
			"    {",
			"        return $this->belongsToMany('App\\Table_3');",
			"    }",
			"            ",
			"}"
		]
	}
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}