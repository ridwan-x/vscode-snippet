{
	"Event Controller": {
		"prefix": "event",
		"description": "/app/Http/Controllers/EventController.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Http\\Controllers;",
			"",
			"",
			"use Illuminate\\Http\\Request;",
			"",
			"",
			"class EventController extends Controller",
			"{",
			"    public function TestEvent(){",
			"    \tevent(new Event('Hallo World'));",
			"    }",
			"}"
		]
	},
	"Event Service Provider Laravel 5.5": {
		"prefix": "event",
		"description": "/app/Providers/EventServiceProvider.php ",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Providers;",
			"",
			"use Illuminate\\Support\\Facades\\Event;",
			"use Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;",
			"",
			"class EventServiceProvider extends ServiceProvider",
			"{",
			"    /**",
			"     * The event listener mappings for the application.",
			"     *",
			"     * @var array",
			"     */",
			"    protected $listen = [",
			"        'App\\Events\\Event' => [",
			"            'App\\Listeners\\EventListener',",
			"        ],",
			"    ];",
			"",
			"    /**",
			"     * Register any events for your application.",
			"     *",
			"     * @return void",
			"     */",
			"    public function boot()",
			"    {",
			"        parent::boot();",
			"",
			"        //",
			"    }",
			"}"
		]
	},
	"Event Listener Laravel 5.5": {
		"prefix": "event",
		"description": "/app/Listeners/EventListener.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Listeners;",
			"",
			"use App\\Events\\Event;",
			"",
			"class EventListener",
			"{",
			"",
			"    /**",
			"     * Handle the event.",
			"     *",
			"     * @param  Event  $event",
			"     * @return void",
			"     */",
			"    public function handle(Event $event)",
			"    {",
			"        dd($event);",
			"    }",
			"}"
		]
	},
	"Event Laravel 5.5": {
		"prefix": "event",
		"description": "/app/Events/Event.php ",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Events;",
			"",
			"class Event",
			"{",
			"",
			"    public $message;",
			"",
			"    /**",
			"     * Create a new event instance.",
			"     *",
			"     * @return void",
			"     */",
			"    public function __construct($message)",
			"    {",
			"        $this->message = $message;",
			"    }",
			"",
			"}"
		]
	}
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}