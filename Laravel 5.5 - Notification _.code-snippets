{
	"Message View Laravel 5.5": {
		"prefix": "notification",
		"description": "/resources/views/email/message.blade.php",
		"scope": "php",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"\">",
			"\t<head>",
			"\t\t<meta charset=\"utf-8\">",
			"\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">",
			"\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">",
			"\t\t<title>Title Page</title>",
			"\t</head>",
			"\t<body>",
			"\t\t{{ $data }}",
			"\t</body>",
			"</html>"
		]
	},
	"Notification Controller Laravel 5.5": {
		"prefix": "notification",
		"description": "/app/Http/Controllers/NotificationController.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Http\\Controllers;",
			"",
			"use App\\User;",
			"use Carbon\\Carbon;",
			"use Illuminate\\Http\\Request;",
			"use App\\Notifications\\TestNotification;",
			"",
			"class NotificationController extends Controller",
			"{",
			"    ",
			"    public function index(){",
			"    \t$user = User::find(2);",
			"",
			"    \t// return view('email.message', ['message' => $user->unreadNotifications->count() ]);",
			"    \t",
			"    \treturn $user->unreadNotifications->count();",
			"    }",
			"",
			"    public function create(){",
			"    \t$user = User::find(2);",
			"",
			"    \t$user->notify(new TestNotification('hallow', $user));",
			"",
			"    \treturn redirect()->back();",
			"    }",
			"",
			"    public function read(){",
			"    \t$user = User::find(2);",
			"    \t",
			"    \t// $user->unreadNotifications()->update(['read_at' => Carbon::now()]);",
			"    \t",
			"    \t$user->unreadNotifications->markAsRead();",
			"",
			"    \treturn redirect()->back();",
			"    }",
			"",
			"    public function delete(){",
			"\t\t$user = User::find(2);",
			"",
			"    \t$user->notifications()->delete();",
			"",
			"    \treturn redirect()->back();",
			"    }",
			"}"
		]
	},
	"Test Notification Laravel 5.5": {
		"prefix": "notification",
		"description": "/app/Notifications/TestNotification.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Notifications;",
			"",
			"use App\\Mail\\MessageMail;",
			"use Illuminate\\Notifications\\Notification;",
			"",
			"",
			"class TestNotification extends Notification",
			"{",
			"",
			"    public $message;",
			"    public $user;",
			"",
			"    /**",
			"     * Create a new notification instance.",
			"     *",
			"     * @return void",
			"     */",
			"    public function __construct($message, $user)",
			"    {",
			"        $this->message = $message;",
			"        $this->user = $user;",
			"    }",
			"",
			"    /**",
			"     * Get the notification's delivery channels.",
			"     *",
			"     * @param  mixed  $notifiable",
			"     * @return array",
			"     */",
			"    public function via($notifiable)",
			"    {",
			"        return ['database', 'mail'];",
			"    }",
			"",
			"    /**",
			"     * Get the mail representation of the notification.",
			"     *",
			"     * @param  mixed  $notifiable",
			"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage",
			"     */",
			"    public function toMail($notifiable)",
			"    {",
			"        return (new MessageMail($this->message, $this->user))->to($this->user->email);",
			"    }",
			"",
			"    /**",
			"     * Get the array representation of the notification.",
			"     *",
			"     * @param  mixed  $notifiable",
			"     * @return array",
			"     */",
			"    public function toArray($notifiable)",
			"    {",
			"        return [",
			"            'data' => $this->message",
			"        ];",
			"    }",
			"}"
		]
	},
	"Message Mail Laravel 5.5": {
		"prefix": "notification",
		"description": "/app/Mail/MessageMail.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Mail;",
			"",
			"use Illuminate\\Mail\\Mailable;",
			"",
			"class MessageMail extends Mailable",
			"{",
			"",
			"    public $message;",
			"    public $user;",
			"",
			"    /**",
			"     * Create a new message instance.",
			"     *",
			"     * @return void",
			"     */",
			"    public function __construct($message, $user)",
			"    {",
			"        $this->message = $message;",
			"        $this->user = $user;",
			"    }",
			"",
			"    /**",
			"     * Build the message.",
			"     *",
			"     * @return $this",
			"     */",
			"    public function build()",
			"    {",
			"        return $this->view('email.message', [",
			"            'data' => $this->message",
			"        ]);",
			"    }",
			"}"
		]
	}
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}