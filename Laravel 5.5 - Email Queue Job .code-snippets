{
	"Message View": {
		"prefix": "queque",
		"description": "/resources/views/email/message.blade.php",
		"scope": "blade",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"\">",
			"\t<head>",
			"\t\t<meta charset=\"utf-8\">",
			"\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">",
			"\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">",
			"\t\t<title>Title Page</title>",
			"\t</head>",
			"\t<body>",
			"\t\t{{ $data }}",
			"\t</body>",
			"</html>"
		]
	},
	"Message Mail Laravel 5.5": {
		"prefix": "queue",
		"description": "/app/Mail/MessageMail.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Mail;",
			"",
			"use Illuminate\\Mail\\Mailable;",
			"",
			"class MessageMail extends Mailable",
			"{",
			"",
			"    public $message;",
			"    public $user;",
			"",
			"    /**",
			"     * Create a new message instance.",
			"     *",
			"     * @return void",
			"     */",
			"    public function __construct($message, $user)",
			"    {",
			"        $this->message = $message;",
			"        $this->user = $user;",
			"    }",
			"",
			"    /**",
			"     * Build the message.",
			"     *",
			"     * @return $this",
			"     */",
			"    public function build()",
			"    {",
			"        return $this->view('email.message', [",
			"            'data' => $this->message",
			"        ]);",
			"    }",
			"}"
		]
	},
	"Send Email Jobs Laravel 5.5": {
		"prefix": "queue",
		"description": "/app/Jobs/SendEmailJobs.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Jobs;",
			"",
			"use App\\Mail\\MessageMail;",
			"use Illuminate\\Support\\Facades\\Mail;",
			"use Illuminate\\Contracts\\Queue\\ShouldQueue;",
			"use Illuminate\\Foundation\\Bus\\Dispatchable;",
			"",
			"class SendEmailJobs implements ShouldQueue",
			"{",
			"    use Dispatchable;",
			"",
			"    public $message, $user;",
			"",
			"    /**",
			"     * Create a new job instance.",
			"     *",
			"     * @return void",
			"     */",
			"    public function __construct($message, $user)",
			"    {",
			"        $this->message = $message;",
			"        $this->user = $user;",
			"    }",
			"",
			"    /**",
			"     * Execute the job.",
			"     *",
			"     * @return void",
			"     */",
			"    public function handle()",
			"    {",
			"        Mail::to($this->user->email)->send(new MessageMail('Hallow', $this->user));",
			"    }",
			"}"
		]
	},
	"Email Controller Laravel 5.5": {
		"prefix": "queue",
		"description": "/app/Http/Controllers/EmailController.php",
		"scope": "php",
		"body": [
			"<?php",
			"",
			"namespace App\\Http\\Controllers;",
			"",
			"use App\\User;",
			"use Carbon\\Carbon;",
			"use App\\Mail\\MessageMail;",
			"use Illuminate\\Http\\Request;",
			"use App\\Jobs\\SendEmailJobs;",
			"use Illuminate\\Support\\Facades\\Mail;",
			"",
			"class EmailController extends Controller",
			"{",
			"    ",
			"    /**",
			"     * php artisan make:mail MessageMail",
			"     * ",
			"     */",
			"    public function sendEmail(){",
			"        $user = User::find(2);",
			"",
			"        Mail::to($user->email)->send(new MessageMail('Hallow', $user));",
			"    }",
			"    ",
			"    /**",
			"     * php artisan make:job SendEmailJobs",
			"     * php artisan queue:table",
			"     * php artisan queue:work",
			"     * ",
			"     */",
			"    public function sendEmailJob(){",
			"        $user = User::find(2);",
			"",
			"        SendEmailJobs::dispatch('Hellow', $user)",
			"        \t\t     ->delay(Carbon::now()",
			"        \t\t\t ->addSeconds(10));",
			"    }",
			"",
			"}"
		]
	}
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}